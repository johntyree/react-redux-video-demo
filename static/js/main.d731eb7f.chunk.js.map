{"version":3,"sources":["apis/youtube.js","actions/index.js","components/SearchBar.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","components/App.js","reducers/index.js","middleware/actionLogger.js","index.js"],"names":["axios","create","baseURL","params","part","maxResults","key","updateVideos","videos","type","payload","selectVideo","video","SearchBar","props","focus","searchInput","current","select","submit","submitSearch","term","onInputChange","event","updateTerm","target","value","onFormSubmit","preventDefault","React","createRef","className","onSubmit","this","ref","onChange","Component","connect","dispatch","a","youtube","get","q","response","data","items","forwardRef","onClick","src","snippet","thumbnails","medium","url","alt","title","renderedList","map","id","videoId","selectedVideo","videoSrc","description","App","searchBar","combineReducers","action","action_count","middleware","applyMiddleware","thunk","getState","next","ac","console","group","ret","log","groupEnd","store","createStore","reducers","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.d731eb7f.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst KEY = \"AIzaSyDUQVUYbByIN1P_XwfIgjRo9GX0NHGy40E\";\n\nexport default axios.create({\n    baseURL: 'https://www.googleapis.com/youtube/v3',\n    params: {\n      part: 'snippet',\n      maxResults: 5,\n      key: KEY\n    }\n});\n","import youtube from '../apis/youtube';\n\nexport const VIDEOS_UPDATED = 'VIDEOS_UPDATED';\nexport const VIDEO_SELECTED = 'VIDEO_SELECTED';\nexport const TERM_UPDATED = 'TERM_UPDATED';\n\n\nexport const submitSearch = term => async dispatch => {\n  const response = await youtube.get('/search', {\n    params: { q: term }\n  });\n\n  dispatch(updateVideos(response.data.items));\n  // Take first video from the results\n  dispatch(selectVideo(response.data.items[0]));\n};\n\n\nexport const updateVideos = videos => {\n  return {\n    type: VIDEOS_UPDATED,\n    payload: videos\n  };\n};\n\n\nexport const selectVideo = video => {\n  return {\n    type: VIDEO_SELECTED,\n    payload: video\n  };\n};\n\n\nexport const updateTerm = term => {\n  return {\n    type: TERM_UPDATED,\n    payload: term\n  };\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { updateTerm, submitSearch } from '../actions';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n      super(props);\n      this.searchInput = React.createRef();\n    }\n\n    focus = () => {\n      this.searchInput.current.focus();\n      this.searchInput.current.select();\n    }\n\n    submit = () => {\n      this.focus();\n      this.props.submitSearch(this.props.term);\n    }\n\n    onInputChange = (event) => {\n      this.props.updateTerm(event.target.value);\n    };\n\n    onFormSubmit = (event) => {\n      if (event) event.preventDefault();\n      this.submit();\n    }\n\n    render() {\n        return (\n            <div className=\"search-bar ui segment\">\n              <form onSubmit={this.onFormSubmit} className=\"ui form\">\n                  <div className=\"field\">\n                      <label>Video Search</label>\n                      <input\n                         ref={this.searchInput}\n                         type=\"text\"\n                         value={this.props.term}\n                         onChange={this.onInputChange}\n                      />\n                  </div>\n              </form>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ term }) => {\n  return { term };\n};\n\nexport default connect(\n  mapStateToProps,\n  { submitSearch, updateTerm },\n  null,\n  { forwardRef: true }\n)(SearchBar);\n","import './VideoItem.css';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { selectVideo } from '../actions';\n\nconst VideoItem = ({ video, selectVideo }) => {\n  return (\n    <div onClick={() => selectVideo(video)} className=\"video-item item\">\n      <img className=\"ui image\"\n           src={video.snippet.thumbnails.medium.url}\n           alt={video.snippet.title} />\n      <div className=\"content\">\n        <div className=\"header\">\n          {video.snippet.title}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default connect(null, { selectVideo })(VideoItem);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport VideoItem from './VideoItem';\n\nconst VideoList = ({ videos }) => {\n  const renderedList = videos.map(video => {\n    return <VideoItem key={video.id.videoId} video={video}/>;\n  });\n  return (\n    <div className=\"ui relaxed divided list\">\n      {renderedList}\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ videos }) => { return { videos }; };\n\nexport default connect(mapStateToProps)(VideoList);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst VideoDetail = ({ video }) => {\n  if (!video) { return <div>Loading ...</div>; };\n  const videoSrc = \"https://youtube.com/embed/\" + video.id.videoId;\n  return (\n    <div>\n      <div className=\"ui embed\">\n        <iframe title=\"Video Player\" src={videoSrc} />\n      </div>\n      <div className=\"ui segment\">\n        <h4 className=\"ui header\">{video.snippet.title}</h4>\n        <p>{video.snippet.description}</p>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ selectedVideo }) => {\n  return { \"video\": selectedVideo };\n};\n\nexport default connect(mapStateToProps)(VideoDetail);\n","import React from 'react';\n\nimport SearchBar from './SearchBar';\nimport VideoList from './VideoList';\nimport VideoDetail from './VideoDetail';\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.searchBar = React.createRef();\n  }\n\n  componentDidMount() {\n    this.searchBar.current.submit();\n  }\n\n  render() {\n    return (\n      <div className=\"ui container\">\n        <SearchBar ref={this.searchBar} />\n        <div className=\"ui grid\">\n          <div className=\"ui row\">\n            <div className=\"eleven wide column\">\n              <VideoDetail />\n            </div>\n            <div className=\"five wide column\">\n              <VideoList />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { VIDEOS_UPDATED, VIDEO_SELECTED, TERM_UPDATED } from '../actions';\n\n\nconst videosReducer = (videos = [], action) => {\n  if (action.type === VIDEOS_UPDATED) {\n    return action.payload;\n  }\n  return videos;\n};\n\n\nconst selectedVideoReducer = (video = null, action) => {\n  if (action.type === VIDEO_SELECTED) {\n    return action.payload;\n  }\n  return video;\n}\n\n\nconst termReducer = (term = null, action) => {\n  if (action.type === TERM_UPDATED) {\n    return action.payload;\n  }\n  return term;\n}\n\n\nexport default combineReducers({\n  selectedVideo: selectedVideoReducer,\n  term: termReducer,\n  videos: videosReducer\n});\n","var action_count = 0;\n\nexport default ({ getState }) => next => action => {\n  const ac = action_count;\n  console.group(action.type, ac);\n  action_count += 1;\n  const ret = next(action);\n  console.log(getState());\n  console.groupEnd();\n  return ret;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\nimport actionLogger from './middleware/actionLogger';\n\n\nconst initialState = { term: 'bananas' };\nconst middleware = applyMiddleware(thunk, actionLogger);\nconst store = createStore(reducers, initialState, middleware);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}